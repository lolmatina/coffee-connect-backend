// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  COFFEE_SHOP_OWNER
  COFFEE_SHOP_MANAGER
  COFFEE_SHOP_STAFF
}

model User {
  id           Int   @id @default(autoincrement())
  email        String   @unique
  password     String
  role         UserRole
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Brand Brand[]
  Location Location[]
  LocationStaff LocationStaff[]
  UserProfile UserProfile?
}

model UserProfile {
  id Int @id @default(autoincrement())
  firstName    String
  lastName     String 
  phoneNumber String?
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model Brand {
  id        Int   @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User   @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Location  Location[]

  MenuTemplate MenuTemplate[]
}


model Location {
  id              Int   @id @default(autoincrement())
  latitude        Float
  longitude       Float
  placeId         String?  @map("place_id") // Optional Google Maps place ID
  name            String?  // Name of the place
  address         String?  // Full formatted address
  city            String?
  state           String?
  country         String?
  postalCode      String?  @map("postal_code")
  geohash         String?  // Optional, good for geo queries
  timezone        String?
  accuracy        Float?
  managerId       Int?
  manager         User?    @relation(fields: [managerId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  BrandId Int
  Brand Brand @relation(fields: [BrandId], references: [id])

  @@map("locations")
  LocationStaff LocationStaff[]
  Menu Menu[]
  Order Order[]
}

model LocationStaff {
  id        Int   @id @default(autoincrement())
  locationId Int
  location Location @relation(fields: [locationId], references: [id])
  staffId Int
  staff User @relation(fields: [staffId], references: [id])
}

model MenuTemplate {
  id        Int       @id @default(autoincrement())
  name      String
  brandId   Int
  brand     Brand        @relation(fields: [brandId], references: [id])
  items     TemplateItem[]
  createdAt DateTime     @default(now())

  Menu Menu[]

  Addon Addon[]

  AddonCategory AddonCategory[]
}

model TemplateItem {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?
  category    String?
  templateId  Int
  template    MenuTemplate       @relation(fields: [templateId], references: [id])


  variants    TemplateItemVariant[]
  MenuItemOverride MenuItemOverride[]
  Tag Tag[] @relation("ItemTags")

  OrderItem OrderItem[]

  TemplateItemTag TemplateItemTag[]

  TemplateItemAddon TemplateItemAddon[]
}

model TemplateItemVariant {
  id            Int   @id @default(autoincrement())
  label         String
  price         Float
  itemId        Int
  templateItem  TemplateItem @relation(fields: [itemId], references: [id])

  OrderItem OrderItem[]
}

model Menu {
  id            Int       @id @default(autoincrement())
  locationId    Int       @unique
  location      Location     @relation(fields: [locationId], references: [id])
  templateId    Int
  template      MenuTemplate @relation(fields: [templateId], references: [id])
  overrides     MenuItemOverride[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model MenuItemOverride {
  id            Int   @id @default(autoincrement())
  menuId        Int
  templateItemId Int
  isAvailable   Boolean? // e.g. location-specific availability
  priceOverride Float?   // optional override per variant

  menu          Menu         @relation(fields: [menuId], references: [id])
  templateItem  TemplateItem @relation(fields: [templateItemId], references: [id])
}

model Tag {
  id          Int        @id @default(autoincrement())
  name        String        // e.g. "vegan", "gluten-free"
  items       TemplateItemTag[]

  TemplateItem TemplateItem[] @relation("ItemTags")
}

model TemplateItemTag {
  id           Int       @id @default(autoincrement())
  itemId       Int
  tagId        Int
  templateItem TemplateItem @relation(fields: [itemId], references: [id])
  tag          Tag          @relation(fields: [tagId], references: [id])

  @@unique([itemId, tagId])
}


model Addon {
  id             Int         @id @default(autoincrement())
  name           String
  price          Float
  categoryId     Int
  category       AddonCategory  @relation(fields: [categoryId], references: [id])
  templateId     Int
  template       MenuTemplate   @relation(fields: [templateId], references: [id])
  items          TemplateItemAddon[]
}

model TemplateItemAddon {
  id            Int       @id @default(autoincrement())
  itemId        Int
  addonId       Int
  templateItem  TemplateItem @relation(fields: [itemId], references: [id])
  addon         Addon        @relation(fields: [addonId], references: [id])

  @@unique([itemId, addonId])
}

model AddonCategory {
  id           Int   @id @default(autoincrement())
  name         String
  maxSelectable Int     @default(1) // how many add-ons a customer can pick
  isRequired   Boolean  @default(false)
  templateId   Int
  template     MenuTemplate @relation(fields: [templateId], references: [id])
  addons       Addon[]
}


model Order {
  id          Int       @id @default(autoincrement())
  items       OrderItem[]
  total       Float
  status      String       // e.g. "pending", "preparing", "complete"
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  locationId Int
  location Location @relation(fields: [locationId], references: [id])

  CustomerId Int
  Customer Customer @relation(fields: [CustomerId], references: [id])
}


model Customer {
  id       Int   @id @default(autoincrement())
  name     String
  phone    String
  orders   Order[]
}



model OrderItem {
  id            Int   @id @default(autoincrement())
  orderId       Int
  templateItemId Int
  variantId     Int?
  quantity      Int
  unitPrice     Float

  order         Order         @relation(fields: [orderId], references: [id])
  templateItem  TemplateItem  @relation(fields: [templateItemId], references: [id])
  variant       TemplateItemVariant? @relation(fields: [variantId], references: [id])
}
